before
1、调用一个功能复杂：不同的客户端均使用了加密功能，先读取、加密、写入，对于客户端来说比较复杂
2、灵活性和可扩张难：不同客户端的步骤都是一样的，如果加密类提供方变成了NewCipherMachine，则每个客户端都需要改变

引入【外观模式】

定义：
    外部与子系统的通信过程通过一个统一的外观角色进行，为子系统中的一组接口提供一个一致的入口
    该模式顶一个了一个高层接口，这个接口使得这一子系统更加容易使用

角色：
    外观角色：从该角色可以知道相关的一个或者多个子系统的功能和职责；在正常情况下，它将所有从客户端发来的请求委派到相应的子系统中去处理；对客户端屏蔽了子系统；
    子系统角色：可以有一个或者多个子系统角色，子系统是一个广义的盖面，它可以是一个雷、一个功能模块、系统的一个组成部分或者一个完整的系统

优点：
    解决了bdfore的两个痛点，如果出现新的加密类NewCipherMachine，仅需要修改外观角色类，客户端不需要修改。
缺点：
    更换新的加密类，则需要修改外观角色类，违法了开闭原则。
    Q：如果解决这个问题：
    A：引入 外观角色类的抽象类，如果发生改变，则新建具体的外观角色抽象类的具体类，客户端面向抽象编程

适用场景：
    1、当要为访问一系列复杂的子系统提供一个简单入口时可以使用外观模式
    2、当客户端与多个子系统之间存在很大依赖性，使用外观模式可以将子系统和客户端解耦，提高子系统的独立性和可移植性



