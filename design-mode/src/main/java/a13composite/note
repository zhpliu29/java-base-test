before的缺点：
1、Folder的设计和实现都非常复杂，需要定义多个集合存储不同类型的成员，并且针对新增一个成员，
都需要提供增删获的方法，存在大量的冗余代码
2、没有提供抽象层，客户端代码必须有别的对待充当【容器】的文件夹、充当【叶子】图像文件和文本文件，无法统一对它们进行处理
3、新增新的类型的叶子和容器都需要对原有代码进行修改，如新增一个视频围文件。

引入【组合模式】

定义：
    组合多个对象形成树形结构以表示具有 整体-部分 关系的层次结构。
    组合模式对当个对象（叶子节点）和组合对象（容器对象）的使用具有一致性。

角色：
    抽象构件
    叶子构件
    容器构件：容器节点包含子节点，其中子节点可以是叶子节点，也可以是容器节点，提供了一个集合用于存储子节点

    关键一：定义了一个抽象构件类，它既可以表示叶子也可以表示容器，而客户端针对该抽象构件进行编程，可以对其进行统一处理；
    关键二：容器对象与抽象构件之间还建立以个聚合关联关系，在容器对象中既可以包含叶子也包含容器，以此实现递归组合，形成一个树形结构。

优点：
缺点：
    在新增新构件是很难对容器中的俄构建类型进行限制，有时候希望一个容器中只能有某些特定类型的对象，
    但是由于都来自相同的抽象层，在这种情况下，必须通过在运行时进行类型检查来实现，这个实现过程较为复杂。

适用场景：
    1、希望通过一种方式忽略整体与部分的差异，客户端可以一致性的对象它们
    2、系统需要处理一个树形结构
    3、在一个系统中能够分离出叶子对象和容器对象，而且它们的类型不固定，需要增加一些新类型

【改进】
从组合模式的代码中，可知管理的方法增删获取方法都在叶子节点实现了，但是叶子节点并不支持；
因此，进行改进：
    1、将增删获取 在抽象类AbstractFile中申明并实现
    2、将增删获取 移动至容器类中，抽象类AbstractFile仅保留杀毒的业务方法，这恰好是每个子类都需要实现的方法。
