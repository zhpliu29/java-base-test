before
1、几乎每个方法中都包含状态判断语句，以判断在该状态下是否具有该方法以及在特定状态下该方法如何实现，导致代码冗长
2、拥有价位复杂的stateCheck()方法，包含大量的if...else...,用于进行状态转换
3、如果新增一种状态，如冻结状态，需要对原有代码进行大量修改

引入【状态模式】

定义：
    允许一个对象在其内部状态改变时改变它的行为，对象看起来似乎修改了它的类。

    当系统某个对象存在多个状态，这些状态之间可以进行转换，而且对象在不同状态下行为
    不相同时可以使用状态模式

角色：
    环境类：拥有多种状态的对象。由于环境类的状态存在多样性且在不同状态下对象的行为有所
           不同，因此将状态独立出去形成单独的状态类。
    抽象状态类：用于定义一个接口以封装与环境类的一个特定状态相关的行为。
    具体状态类：每一个具体状态类对应环境的一个具体状态，不同的具体状态类其行为有所不同


优点：
缺点：
    违反开不原则，新增状态类需要修改其它状态类中负责状态转换的源代码

适合场景：
    1、对象的行为依赖于它的状态（例如某些属性值），状态的改变将导致行为的变化
    2、在代码中包含大量与对象状态有关的条件语句，这些条件语句出现，会导致代码可维护性变差，耦合性强