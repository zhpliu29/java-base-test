为了解决工厂方法模式的缺点

引入【抽象工厂模式】

定义：
    提供一个创建一系列相关或相互依赖对象的接口，而无需制定他们具体的类。
    两个重要概念【产品族：同一工厂产生的，位于不同产品等级机构中的一组产品】和【产品等级结构：产品的继承结构】

结构：
    抽象工厂  具体工厂
    抽象产品  具体产品

优点：
    解决了工厂方法模式的一个痛点
    [如果新增的产品很多，会增加很多的产品类和具体工厂类]
    新增产品族扩展符合开闭原则：新增加新的产品族，只需要新增一个具体工厂，无其它改动
缺点：
    新增产品等级结构违背开闭原则：需要修改抽象工厂、具体工厂，违背了开闭原则


适用场景：
    产品等级结构稳定，设计完成之后，不会像系统中增加或者删除产品等级结构